@startuml
class org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingSimulatedAnnealingForager {
- Score startingTemperature
- int levelsLength
- double[] startingTemperatureLevels
- double[] temperatureLevels
# boolean isAccepted(LocalSearchMoveScope<Solution_>)
+ void phaseStarted(LocalSearchPhaseScope<Solution_>)
+ void phaseEnded(LocalSearchPhaseScope<Solution_>)
+ void stepStarted(LocalSearchStepScope<Solution_>)
}
interface org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.NeighbourhoodEvaluator {
~ Map<Score,Solution_> getBestSolutionFromNeighbourhood(List<Solution_>)
~ Map<Score,List<Solution_>> getCandidatesAboveThreshold(List<Solution_>,double,Double)
~ Map<Score,List<Solution_>> getTopCandidatesAndAverageScore(List<Solution_>,double,Double)
}
class org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingHillClimbingForager {
# boolean isAccepted(LocalSearchMoveScope<Solution_>)
}

class org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingGreatDelugeForager {
- Score initialWaterLevel
- Score waterLevelIncrementScore
- Double waterLevelIncrementRatio
- Score startingWaterLevel
- Score currentWaterLevel
- Double currentWaterLevelRatio
~ boolean initializedStartingLevel
+ Score getWaterLevelIncrementScore()
+ void setWaterLevelIncrementScore(Score)
+ Score getInitialWaterLevel()
+ void setInitialWaterLevel(Score)
+ Double getWaterLevelIncrementRatio()
+ void setWaterLevelIncrementRatio(Double)
# boolean isAccepted(LocalSearchMoveScope<Solution_>)
+ void phaseStarted(LocalSearchPhaseScope<Solution_>)
+ void phaseEnded(LocalSearchPhaseScope<Solution_>)
+ void stepEnded(LocalSearchStepScope<Solution_>)
}
class org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingStepCountingHillClimbingForager {
- int stepCountingHillClimbingSize
- Score thresholdScore
- int count
# StepCountingHillClimbingType stepCountingHillClimbingType
# boolean isAccepted(LocalSearchMoveScope<Solution_>)
+ void phaseStarted(LocalSearchPhaseScope<Solution_>)
+ void stepEnded(LocalSearchStepScope<Solution_>)
+ void phaseEnded(LocalSearchPhaseScope<Solution_>)
- int determineCountIncrement(LocalSearchStepScope<Solution_>)
}
class org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingTabuSearchForager {
- List<Solution_> tabuList
- int tabuListSize
# boolean isAccepted(LocalSearchMoveScope<Solution_>)
+ void stepEnded(LocalSearchStepScope<Solution_>)
}
abstract class org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager {
# Logger logger
- LocalSearchStatistics localSearchStatistics
# StepStatistic currentStepStatistic
- Double terminationFitness
- int acceptedCountLimit
- long selectedMoveCount
- long acceptedMoveCount
- NeighbourhoodEvaluator<Solution_> neighbourhoodEvaluator
- InnerScoreDirector<Solution_,?> scoreDirector
- LocalSearchMoveScope<Solution_> lastPickedMoveScope
- List<LocalSearchMoveScope<Solution_>> candidateMoveScopes
# Map<Solution_,LocalSearchMoveScope<Solution_>> solutionMoveScopeMap
# int iterations
- EvaluationType evaluationType
- double evaluationThreshold
- double topThreshold
+ void phaseStarted(LocalSearchPhaseScope<Solution_>)
+ void stepStarted(LocalSearchStepScope<Solution_>)
+ boolean supportsNeverEndingMoveSelector()
+ void addMove(LocalSearchMoveScope<Solution_>)
+ boolean isQuitEarly()
+ LocalSearchMoveScope<Solution_> pickMove(LocalSearchStepScope<Solution_>)
+ void phaseEnded(LocalSearchPhaseScope<Solution_>)
+ String toString()
# {abstract}boolean isAccepted(LocalSearchMoveScope<Solution_>)
- LocalSearchMoveScope<Solution_> getStepWinner()
- LocalSearchMoveScope<Solution_> evaluateStepCandidates()
- void mapCandidateSolutionsToMoveScopes()
+ double getEvaluationThreshold()
+ void setEvaluationThreshold(double)
+ double getTopThreshold()
+ void setTopThreshold(double)
+ void setLocalSearchStatistics(LocalSearchStatistics)
+ void setTerminationFitness(Double)
}

interface org.optaplanner.core.impl.localsearch.decider.forager.LocalSearchForager{
}

org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager <|-- org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingSimulatedAnnealingForager
org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager <|-- org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingHillClimbingForager
org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager <|-- org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingGreatDelugeForager
org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager <|-- org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingStepCountingHillClimbingForager
org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager <|-- org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.PrivacyPreservingTabuSearchForager
org.optaplanner.core.impl.localsearch.decider.forager.LocalSearchForager <|.. org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager
org.optaplanner.core.impl.localsearch.event.LocalSearchPhaseLifecycleListenerAdapter <|-- org.optaplanner.core.impl.localsearch.decider.forager.privacypreserving.AbstractPrivacyPreservingForager
@enduml